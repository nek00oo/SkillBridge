# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum Category {
  ART
  BIOLOGY
  CHEMISTRY
  COMPUTER_SCIENCE
  ECONOMICS
  ENGLISH
  GEOGRAPHY
  HISTORY
  LAW
  LITERATURE
  MATHEMATICS
  MUSIC
  PHYSICS
  PROGRAMMING
  RUSSIAN
}

input CreateTutorCardInput {
  content: String!
  imgUrl: String!
  isPublished: Boolean
  price: Float!
  rating: Float
  subjectCategories: [Category!]!
  title: String!
}

input CreateUserInput {
  birthDate: String
  email: String!
  firstname: String!
  lastname: String
  password: String!
  profileImageUrl: String
  role: Role! = STUDENT
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GqlUser {
  birthDate: DateTime
  createdAt: DateTime!
  email: String!
  firstname: String!
  id: ID!
  lastname: String
  profileImageUrl: String
  role: Role!
  updatedAt: DateTime!
}

type Mutation {
  createTutorCard(input: CreateTutorCardInput!, userId: Float!): TutorCardEntity!
  createUser(input: CreateUserInput!): GqlUser!
  deleteTutorCard(id: Float!): TutorCardEntity!
  deleteTutorCardByAuthor(authorId: Float!): TutorCardEntity!
  deleteUser(id: Float!): GqlUser!
  updateTutorCard(id: Float!, input: UpdateTutorCardInput!): TutorCardEntity!
  updateTutorCardByAuthor(authorId: Float!, input: UpdateTutorCardInput!): TutorCardEntity!
  updateUser(id: Float!, input: UpdateUserInput!): GqlUser!
}

type Query {
  tutorCard(id: Float!): TutorCardEntity!
  tutorCards(category: String, limit: Float! = 9, page: Float! = 1): TutorCardsResponse!
  user(id: Float!): GqlUser!
  userByEmail(email: String!): GqlUser!
  users(limit: Float! = 10, offset: Float! = 0): [GqlUser!]!
}

enum Role {
  ADMIN
  STUDENT
  TUTOR
}

type TutorCardEntity {
  content: String!
  createdAt: DateTime!
  firstname: String
  id: ID!
  imgUrl: String!
  isPublished: Boolean
  price: Float!
  rating: Float
  subjects: [Category!]!
  title: String!
  updatedAt: DateTime!
}

type TutorCardsResponse {
  total: Float!
  tutors: [TutorCardEntity!]!
}

input UpdateTutorCardInput {
  content: String
  imgUrl: String
  isPublished: Boolean
  price: Float
  rating: Float
  subjectCategories: [Category!]
  title: String
}

input UpdateUserInput {
  birthDate: String
  firstname: String
  lastname: String
  password: String
  profileImageUrl: String
}