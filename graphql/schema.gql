# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AssignmentEntity {
  category: Category!
  completed: Boolean
  content: String!
  createdAt: DateTime!
  dueDate: DateTime!
  grade: Int
  id: Int!
  studentId: Int!
  title: String!
  tutorId: Int!
  updatedAt: DateTime!
}

type AssignmentStats {
  category: String!
  completed_count: Int!
  total: Int!
}

enum Category {
  ART
  BIOLOGY
  CHEMISTRY
  COMPUTER_SCIENCE
  ECONOMICS
  ENGLISH
  GEOGRAPHY
  HISTORY
  LAW
  LITERATURE
  MATHEMATICS
  MUSIC
  PHYSICS
  PROGRAMMING
  RUSSIAN
}

input CreateAssignmentInput {
  category: Category!
  content: String!
  dueDate: String!
  studentId: Int!
  title: String!
}

input CreateReviewInput {
  cardId: Int!
  comment: String
  rating: Int!
}

input CreateTutorCardInput {
  content: String!
  imgUrl: String!
  isPublished: Boolean
  price: Float!
  rating: Float
  subjectCategories: [Category!]!
  title: String!
}

input CreateUserInput {
  birthDate: String
  email: String!
  firstname: String!
  lastname: String
  password: String!
  profileImageUrl: String
  role: Role! = STUDENT
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createAssignment(input: CreateAssignmentInput!, tutorId: Float!): AssignmentEntity!
  createReview(createReviewInput: CreateReviewInput!, studentId: Int!): ReviewEntity!
  createTutorCard(input: CreateTutorCardInput!, userId: Int!): TutorCardEntity!
  createUser(input: CreateUserInput!): UserEntity!
  deleteAssignmentById(id: Int!): AssignmentEntity!
  deleteReviewById(id: Int!): ReviewEntity!
  deleteTutorCardByAuthor(authorId: Int!): TutorCardEntity!
  deleteTutorCardById(id: Int!): TutorCardEntity!
  deleteUserById(id: Int!): UserEntity!
  updateAssignmentById(id: Int!, input: UpdateAssignmentInput!): AssignmentEntity!
  updateReviewById(id: Int!, updateReviewInput: UpdateReviewInput!): ReviewEntity!
  updateTutorCardByAuthor(authorId: Int!, input: UpdateTutorCardInput!): TutorCardEntity!
  updateTutorCardById(id: Int!, input: UpdateTutorCardInput!): TutorCardEntity!
  updateUserById(id: Int!, input: UpdateUserInput!): UserEntity!
}

type Query {
  getAssignmentById(id: Int!): AssignmentEntity!
  getAssignmentsByStudentId(studentId: Int!): [AssignmentStats!]!
  getReviewById(id: Int!): ReviewEntity!
  getReviewsByCardId(cardId: Int!): [ReviewEntity!]!
  getReviewsByStudentId(studentId: Int!): [ReviewEntity!]!
  getTutorCardById(id: Int!): TutorCardEntity!
  getTutorCards(category: String, limit: Float! = 9, page: Float! = 1): TutorCardsResponse!
  getUserByEmail(email: String!): UserEntity!
  getUserById(id: Int!): UserEntity!
  getUsers(limit: Float! = 10, offset: Float! = 0): [UserEntity!]!
}

type ReviewEntity {
  cardId: Int!
  comment: String
  createdAt: DateTime!
  id: Int!
  rating: Int!
  studentId: Int!
  updatedAt: DateTime!
}

enum Role {
  ADMIN
  STUDENT
  TUTOR
}

type TutorCardEntity {
  content: String!
  createdAt: DateTime!
  firstname: String
  id: ID!
  imgUrl: String!
  isPublished: Boolean
  price: Float!
  rating: Float
  subjects: [Category!]!
  title: String!
  updatedAt: DateTime!
}

type TutorCardsResponse {
  total: Float!
  tutors: [TutorCardEntity!]!
}

input UpdateAssignmentInput {
  category: Category
  completed: Boolean
  content: String
  dueDate: String
  grade: Int
  title: String
}

input UpdateReviewInput {
  comment: String
  rating: Int
}

input UpdateTutorCardInput {
  content: String
  imgUrl: String
  isPublished: Boolean
  price: Float
  rating: Float
  subjectCategories: [Category!]
  title: String
}

input UpdateUserInput {
  birthDate: String
  firstname: String
  lastname: String
  password: String
  profileImageUrl: String
}

type UserEntity {
  birthDate: DateTime
  createdAt: DateTime!
  email: String!
  firstname: String!
  id: ID!
  lastname: String
  profileImageUrl: String
  role: Role!
  updatedAt: DateTime!
}