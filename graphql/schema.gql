# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AssignmentEntity {
  category: Category!
  completed: Boolean
  content: String!
  createdAt: DateTime!
  dueDate: DateTime!
  grade: Int
  id: Int!
  studentId: Int!
  title: String!
  tutorId: Int!
  updatedAt: DateTime!
}

type AssignmentStats {
  category: String!
  completed_count: Int!
  total: Int!
}

enum Category {
  ART
  BIOLOGY
  CHEMISTRY
  COMPUTER_SCIENCE
  ECONOMICS
  ENGLISH
  GEOGRAPHY
  HISTORY
  LAW
  LITERATURE
  MATHEMATICS
  MUSIC
  PHYSICS
  PROGRAMMING
  RUSSIAN
}

input CreateAssignmentInput {
  category: Category!
  content: String!
  dueDate: String!
  studentId: Int!
  title: String!
}

input CreateReviewInput {
  cardId: Int!
  comment: String
  rating: Int!
}

input CreateTutorCardInput {
  content: String!
  imgUrl: String!
  isPublished: Boolean
  price: Float!
  rating: Float
  subjectCategories: [Category!]!
  title: String!
}

input CreateUserInput {
  birthDate: String
  email: String!
  firstname: String!
  lastname: String
  password: String!
  profileImageUrl: String
  role: Role! = STUDENT
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GqlUser {
  birthDate: DateTime
  createdAt: DateTime!
  email: String!
  firstname: String!
  id: ID!
  lastname: String
  profileImageUrl: String
  role: Role!
  updatedAt: DateTime!
}

type Mutation {
  createAssignment(input: CreateAssignmentInput!, tutorId: Float!): AssignmentEntity!
  createReview(createReviewInput: CreateReviewInput!, studentId: Float!): Review!
  createTutorCard(input: CreateTutorCardInput!, userId: Float!): TutorCardEntity!
  createUser(input: CreateUserInput!): GqlUser!
  deleteAssignment(id: Float!): AssignmentEntity!
  deleteReview(id: Int!): Review!
  deleteTutorCard(id: Float!): TutorCardEntity!
  deleteTutorCardByAuthor(authorId: Float!): TutorCardEntity!
  deleteUser(id: Float!): GqlUser!
  updateAssignment(id: Float!, input: UpdateAssignmentInput!): AssignmentEntity!
  updateReviewById(id: Int!, updateReviewInput: UpdateReviewInput!): Review!
  updateTutorCard(id: Float!, input: UpdateTutorCardInput!): TutorCardEntity!
  updateTutorCardByAuthor(authorId: Float!, input: UpdateTutorCardInput!): TutorCardEntity!
  updateUser(id: Float!, input: UpdateUserInput!): GqlUser!
}

type Query {
  assignment(id: Float!): AssignmentEntity!
  assignmentsStats(studentId: Float!): [AssignmentStats!]!
  review(id: Float!): Review!
  reviewsByCard(cardId: Float!): [Review!]!
  reviewsByStudent(studentId: Float!): [Review!]!
  tutorCard(id: Float!): TutorCardEntity!
  tutorCards(category: String, limit: Float! = 9, page: Float! = 1): TutorCardsResponse!
  user(id: Float!): GqlUser!
  userByEmail(email: String!): GqlUser!
  users(limit: Float! = 10, offset: Float! = 0): [GqlUser!]!
}

type Review {
  cardId: Int!
  comment: String
  createdAt: DateTime!
  id: Int!
  rating: Int!
  studentId: Int!
  updatedAt: DateTime!
}

enum Role {
  ADMIN
  STUDENT
  TUTOR
}

type TutorCardEntity {
  content: String!
  createdAt: DateTime!
  firstname: String
  id: ID!
  imgUrl: String!
  isPublished: Boolean
  price: Float!
  rating: Float
  subjects: [Category!]!
  title: String!
  updatedAt: DateTime!
}

type TutorCardsResponse {
  total: Float!
  tutors: [TutorCardEntity!]!
}

input UpdateAssignmentInput {
  category: Category!
  completed: Boolean
  content: String!
  dueDate: String!
  grade: Int
  studentId: Int!
  title: String!
}

input UpdateReviewInput {
  cardId: Int!
  comment: String
  rating: Int!
}

input UpdateTutorCardInput {
  content: String!
  imgUrl: String!
  isPublished: Boolean
  price: Float!
  rating: Float
  subjectCategories: [Category!]!
  title: String!
}

input UpdateUserInput {
  birthDate: String
  firstname: String
  lastname: String
  password: String
  profileImageUrl: String
}